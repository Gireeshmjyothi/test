public void validateOtpValidationRequest(OtpValidationRequest otpValidationRequest) {
        logger.debug("User OTP validation start for {}", otpValidationRequest);
        errorDtoList = new ArrayList<>();
        checkMandatoryField(otpValidationRequest.getMobileNumber(), "mobileNumber");
        checkMandatoryField(otpValidationRequest.getRequestId(), "requestId");
        checkMandatoryField(otpValidationRequest.getRequestType(), "requestType");
        checkMandatoryField(otpValidationRequest.getOtp(), "otp");

        throwIfErrors();

        checkForLeadingTrailingAndSingleSpace(otpValidationRequest.getMobileNumber(), "mobileNumber");
        checkForLeadingTrailingAndSingleSpace(otpValidationRequest.getRequestId(), "requestId");
        checkForLeadingTrailingAndSingleSpace(otpValidationRequest.getRequestType(), "requestType");
        checkForLeadingTrailingAndSingleSpace(otpValidationRequest.getOtp(), "otp");
        logger.debug("validateFieldsLength completed for {}", otpValidationRequest);

        RequestType requestType = RequestType.getRequestType(StringUtils.trim(otpValidationRequest.getRequestType()));
        otpValueValidation(UUID.fromString(otpValidationRequest.getRequestId()), otpValidationRequest.getMobileNumber(), otpValidationRequest.getOtp(), requestType);
        logger.debug("User OTP validation completed for {}", otpValidationRequest);
    }

    /**
     * Validates the otp by checking if it matches the stored otp in the DB and ensure it has not expired.
     *
     * @param requestId UUID
     * @param userId    UUID
     * @param otpText   String
     */
    public void otpValueValidation(UUID requestId, String mobileNumber, String otpText, RequestType requestType) {
        errorDtoList = new ArrayList<>();
        OtpManagement otpManagement = otpManagementDao.getOtpDetailsByRequestIdAndMobileNumberAndOtpCode(requestId, mobileNumber, otpText, requestType);
        isOtpExpiry(DateTimeUtils.isPastDate(otpManagement.getExpiryTime()));
        matchOtp(otpText, otpManagement.getOtpCode());
    }

    /**
     * Compare the provided otp with the stored otp and add an error if they do not match
     *
     * @param otpFromDB String
     * @param otp       String
     */
    private void matchOtp(String otp, String otpFromDB) {
        if (!otp.equals(otpFromDB)) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, MerchantConstant.OTP)).build());
        }
        throwIfErrors();
    }
