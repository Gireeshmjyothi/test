package com.epay.reporting.validator;

import com.epay.reporting.dao.OtpManagementDao;
import com.epay.reporting.dto.ErrorDto;
import com.epay.reporting.entity.OtpManagement;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.model.request.OtpValidationRequest;
import com.epay.reporting.util.DateTimeUtils;
import com.epay.reporting.util.constants.ErrorConstants;
import com.epay.reporting.util.constants.MerchantConstant;
import com.epay.reporting.util.enums.RequestType;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;

import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class OtpValidatorTest {

    @InjectMocks
    private OtpValidator otpValidator;

    @Mock
    private OtpManagementDao otpManagementDao;

    private OtpValidationRequest validRequest;
    private UUID requestId;

    @BeforeEach
    void setup() {
        requestId = UUID.randomUUID();
        validRequest = new OtpValidationRequest();
        validRequest.setMobileNumber("9876543210");
        validRequest.setRequestId(requestId.toString());
        validRequest.setRequestType(RequestType.REGISTRATION.name());
        validRequest.setOtp("123456");
    }

    // ✅ Positive Test: Valid OTP, Not expired
    @Test
    void testValidateOtpValidationRequest_Success() {
        OtpManagement otpManagement = new OtpManagement();
        otpManagement.setOtpCode("123456");
        otpManagement.setExpiryTime(LocalDateTime.now().plusMinutes(5));

        when(otpManagementDao.getOtpDetailsByRequestIdAndMobileNumberAndOtpCode(
                eq(requestId),
                eq("9876543210"),
                eq("123456"),
                eq(RequestType.REGISTRATION))
        ).thenReturn(otpManagement);

        try (MockedStatic<DateTimeUtils> mockedStatic = mockStatic(DateTimeUtils.class)) {
            mockedStatic.when(() -> DateTimeUtils.isPastDate(any())).thenReturn(false);
            assertDoesNotThrow(() -> otpValidator.validateOtpValidationRequest(validRequest));
        }

        verify(otpManagementDao, times(1))
                .getOtpDetailsByRequestIdAndMobileNumberAndOtpCode(any(), any(), any(), any());
    }

    // ❌ Negative Test: Missing required field (mobileNumber)
    @Test
    void testValidateOtpValidationRequest_MissingField_ThrowsException() {
        validRequest.setMobileNumber(null);

        ReportingException ex = assertThrows(ReportingException.class, () ->
                otpValidator.validateOtpValidationRequest(validRequest)
        );

        assertTrue(ex.getMessage().contains("mobileNumber"));
    }

    // ❌ Negative Test: Invalid OTP (not matching DB)
    @Test
    void testValidateOtpValidationRequest_InvalidOtp_ThrowsException() {
        OtpManagement otpManagement = new OtpManagement();
        otpManagement.setOtpCode("654321");
        otpManagement.setExpiryTime(LocalDateTime.now().plusMinutes(5));

        when(otpManagementDao.getOtpDetailsByRequestIdAndMobileNumberAndOtpCode(any(), any(), any(), any()))
                .thenReturn(otpManagement);

        try (MockedStatic<DateTimeUtils> mockedStatic = mockStatic(DateTimeUtils.class)) {
            mockedStatic.when(() -> DateTimeUtils.isPastDate(any())).thenReturn(false);

            ReportingException ex = assertThrows(ReportingException.class, () ->
                    otpValidator.validateOtpValidationRequest(validRequest)
            );

            assertTrue(ex.getMessage().contains(MerchantConstant.OTP));
            assertEquals(ErrorConstants.NOT_FOUND_ERROR_CODE, ex.getCode());
        }
    }

    // ❌ Negative Test: OTP Expired
    @Test
    void testValidateOtpValidationRequest_ExpiredOtp_ThrowsException() {
        OtpManagement otpManagement = new OtpManagement();
        otpManagement.setOtpCode("123456");
        otpManagement.setExpiryTime(LocalDateTime.now().minusMinutes(10));

        when(otpManagementDao.getOtpDetailsByRequestIdAndMobileNumberAndOtpCode(any(), any(), any(), any()))
                .thenReturn(otpManagement);

        try (MockedStatic<DateTimeUtils> mockedStatic = mockStatic(DateTimeUtils.class)) {
            mockedStatic.when(() -> DateTimeUtils.isPastDate(any())).thenReturn(true);

            ReportingException ex = assertThrows(ReportingException.class, () ->
                    otpValidator.validateOtpValidationRequest(validRequest)
            );

            assertTrue(ex.getMessage().toLowerCase().contains("expired"));
        }
    }

    // ✅ Edge Test: RequestType with extra spaces
    @Test
    void testValidateOtpValidationRequest_TrimmedRequestType_Success() {
        validRequest.setRequestType("  REGISTRATION  ");

        OtpManagement otpManagement = new OtpManagement();
        otpManagement.setOtpCode("123456");
        otpManagement.setExpiryTime(LocalDateTime.now().plusMinutes(5));

        when(otpManagementDao.getOtpDetailsByRequestIdAndMobileNumberAndOtpCode(
                any(), any(), any(), eq(RequestType.REGISTRATION))
        ).thenReturn(otpManagement);

        try (MockedStatic<DateTimeUtils> mockedStatic = mockStatic(DateTimeUtils.class)) {
            mockedStatic.when(() -> DateTimeUtils.isPastDate(any())).thenReturn(false);
            assertDoesNotThrow(() -> otpValidator.validateOtpValidationRequest(validRequest));
        }
    }
}
