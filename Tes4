
package com.epay.reporting.dao;

import com.epay.reporting.config.ReportingConfig;
import com.epay.reporting.dto.OtpGenerationDto;
import com.epay.reporting.dto.ReportSmsDto;
import com.epay.reporting.entity.NotificationManagement;
import com.epay.reporting.entity.OtpManagement;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.mapper.OtpManagementMapper;
import com.epay.reporting.repository.OtpManagementRepository;
import com.epay.reporting.util.DateTimeUtils;
import com.epay.reporting.util.ReportUtils;
import com.epay.reporting.util.enums.RequestType;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class OtpManagementDaoTest {

    @Mock
    private NotificationDao notificationDao;

    @Mock
    private OtpManagementRepository otpManagementRepository;

    @Mock
    private OtpManagementMapper otpManagementMapper;

    @Mock
    private ReportingConfig reportingConfig;

    @InjectMocks
    private OtpManagementDao otpManagementDao;

    private OtpGenerationDto otpGenerationDto;
    private OtpManagement otpManagement;

    @BeforeEach
    void setup() {
        otpGenerationDto = OtpGenerationDto.builder()
                .mobileNumber("9876543210")
                .requestType(RequestType.LOGIN)
                .build();

        otpManagement = new OtpManagement();
        otpManagement.setId(1001L);
        otpManagement.setMobileNumber("9876543210");
        otpManagement.setRequestType(RequestType.LOGIN);
    }

    // ✅ Positive test: Successful OTP save
    @Test
    void testSave_Success() throws Exception {
        // Mock dependencies
        when(otpManagementRepository.findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(any(), any()))
                .thenReturn(Optional.empty());
        when(reportingConfig.getOtpExpiryTime()).thenReturn(5);
        when(otpManagementMapper.mapOtpGenerationDtoToOtpManagement(any())).thenReturn(otpManagement);
        when(otpManagementRepository.save(any(OtpManagement.class))).thenReturn(otpManagement);
        doNothing().when(notificationDao).publishSmsNotification(any(ReportSmsDto.class));

        // Call method
        otpManagementDao.save(otpGenerationDto);

        // Verify interactions
        verify(otpManagementRepository, times(1))
                .findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(RequestType.LOGIN, "9876543210");
        verify(otpManagementRepository, times(1)).save(any(OtpManagement.class));
        verify(notificationDao, times(1)).publishSmsNotification(any(ReportSmsDto.class));
    }

    // ❌ Negative test: Repository save throws exception
    @Test
    void testSave_ThrowsReportingException_OnRepositoryFailure() {
        when(otpManagementRepository.findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(any(), any()))
                .thenReturn(Optional.empty());
        when(otpManagementMapper.mapOtpGenerationDtoToOtpManagement(any())).thenReturn(otpManagement);
        when(otpManagementRepository.save(any(OtpManagement.class)))
                .thenThrow(new RuntimeException("DB save failed"));
        when(reportingConfig.getOtpExpiryTime()).thenReturn(5);

        ReportingException exception = assertThrows(ReportingException.class,
                () -> otpManagementDao.save(otpGenerationDto));

        assertTrue(exception.getMessage().contains("While saving otp"));
        verify(otpManagementRepository, times(1)).save(any(OtpManagement.class));
    }

    // ✅ Positive test: Existing OTP expired successfully
    @Test
    void testExpiredAlreadyInProcessOtpRequest_WhenRecordExists() {
        OtpManagement existingOtp = new OtpManagement();
        existingOtp.setId(200L);
        existingOtp.setMobileNumber("9876543210");
        existingOtp.setRequestType(RequestType.LOGIN);

        when(otpManagementRepository.findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(any(), any()))
                .thenReturn(Optional.of(existingOtp));
        when(otpManagementRepository.save(any(OtpManagement.class))).thenReturn(existingOtp);

        otpManagementDao.expiredAlreadyInProcessOtpRequest("9876543210", RequestType.LOGIN);

        verify(otpManagementRepository, times(1))
                .findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(RequestType.LOGIN, "9876543210");
        verify(otpManagementRepository, times(1)).save(existingOtp);
        assertNotNull(existingOtp.getExpiryTime());
    }

    // ✅ Positive test: No existing OTP found, do nothing
    @Test
    void testExpiredAlreadyInProcessOtpRequest_NoExistingOtp() {
        when(otpManagementRepository.findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(any(), any()))
                .thenReturn(Optional.empty());

        otpManagementDao.expiredAlreadyInProcessOtpRequest("9876543210", RequestType.LOGIN);

        verify(otpManagementRepository, times(1))
                .findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(RequestType.LOGIN, "9876543210");
        verify(otpManagementRepository, never()).save(any());
    }

    // ❌ Negative test: Exception thrown while sending SMS
    @Test
    void testSave_WhenSmsNotificationFails() throws JsonProcessingException {
        when(otpManagementRepository.findTopByRequestTypeAndMobileNumberOrderByExpiryTimeDesc(any(), any()))
                .thenReturn(Optional.empty());
        when(otpManagementMapper.mapOtpGenerationDtoToOtpManagement(any())).thenReturn(otpManagement);
        when(otpManagementRepository.save(any(OtpManagement.class))).thenReturn(otpManagement);
        when(reportingConfig.getOtpExpiryTime()).thenReturn(5);
        doThrow(new JsonProcessingException("SMS send failed") {})
                .when(notificationDao).publishSmsNotification(any(ReportSmsDto.class));

        ReportingException exception = assertThrows(ReportingException.class,
                () -> otpManagementDao.save(otpGenerationDto));

        assertTrue(exception.getMessage().contains("While saving otp"));
        verify(notificationDao, times(1)).publishSmsNotification(any(ReportSmsDto.class));
    }
}
